What happens when you initialize a repository? Why do you need to do it?

When you initilize a repository you get the message "Initiliazed empty Git Repository in /../../../.git/"

You need to first identify the folder or directory where you want to create the Git Repository then you need type git init command once u are in the directory

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is between working directory and Git Commit, it enables us to move files which we think are ready for a commit to a diff area. Before we commit if we want to re-analyse about adding or removing certain files we can do that easily in the staging without doing any commits with git reset command

How can you use the staging area to make sure you have one commit per logical change?

If there are files for each logical change (eg: index.html, game.js etc.) then staging area can help ensure we do one commit per logical change. git diff and git diff --staged can help us ensure that we keep track of logical changes and commit only one logical change per commit

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Naming convention of the branches (master, experimental, NewVersion, forTeamMember etc) will help us keep the history organized. Anytime we do git status we will know which branch we are on and what are we currently working on

How do the diagrams help you visualize the branch structure?

Diagrams help you to understand in a bigger pricture where the whole repo stands. where a new feature brnach is right now and how different it is from the master branch, this might help merging fixes etc. in the future
Diagrams also help us understand if there are certain commits that are unreachable. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When we merge two branches we create a new branch that has changes/commits from both the branches. we represent it to show how the new commit of the merged branch has two parents and what all commits will be tracked down in the merged branch (the reachable commits from both the branches)

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros: you dont have to worry about multiple changes in multiple branches
	  Time efficient


Cons: cannot detect legitimate conflicts all the time
      is not smart enough to understand the logical changes